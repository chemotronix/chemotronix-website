import { useRouter } from "next/router";
import Head from "next/head";
import Sidebar from "../components/Sidebar";
import { ConnectButton, showBalance } from "@rainbow-me/rainbowkit";
import Dark from "../images/dark.png"
import Image from "next/image";
import { useState } from "react";
import { ethers } from "ethers";
import connectContract from "../utils/connectContract";
import { toast } from "react-toastify";
import { BASE_URL, getUniqueId } from "../utils/global";

export default function BuyCredit() {

    const router = useRouter();
    const { name } = router.query;

    const [showBuying, setShowBuying] = useState(false);
    const [buying, setBuying] = useState("Co2E");
    const [amount, setAmount] = useState("");
    const [id, setId] = useState("");
    const [isLoading, setIsLoading] = useState(false);

  const toggleBuying = () => {
    setShowBuying(!showBuying);
  };
  const changeBuying = (e) => {
    setBuying(e);
    setShowBuying(!showBuying);
  };

  const createEvent = async () => {
    if (getUniqueId) {
      try {
        const chemContract = connectContract();

        if (chemContract) {
          let eventDataCID = getUniqueId();

          const txn = await chemContract.buyCredit(
            eventDataCID,
            transferAmount,
            {
              gasLimit: 900000,
            }
          );
          console.log("Minting...", txn.hash);
          console.log("Minted -- ", txn.hash);
          toast.success("Token Purchased");
          setIsLoading(false);
        } else {
          console.log("Error getting contract.");
          toast.error("Error getting contract.");
          setIsLoading(false);
        }
      } catch (error) {
        console.log(error, "err");
        toast.success("Token Purchase failed");
        setIsLoading(false);
      }
    } else {
      toast.error("Can't get your uniqueId, make sure you have subscribed");
    }
  };
  async function handleSubmit(e) {
    e.preventDefault();
    setIsLoading(true);
    const body = {
      amnt: amount,
    };

    await createEvent();
  }

  return (
    <div>
      <Head>
        <title>Devices</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.png" />
      </Head>

      <main className="flex bg-transparent text-black w-[100%]" data-theme="emerald">
        <div className="flex flex-col items-cente justify-cente py-8 w-[0%] lg:w-[20%]">
            <div className="">
                <Sidebar/>
            </div>
          </div>
          <div className="lg:ml-5 w-[100%] lg:w-[80%] py-10 px-10 flex flex-col bg-[#f6f9ff]">
                <div className="flex flex-row justify-between">
                  <div className="flex flex-row gap-5">
                    <h6 className="text-3xl font-bold mb-5">Welcome {name}! </h6>
                   </div>
                  <div className="flex flex-row gap-5">
                    <button><Image src={Dark} /></button>
                    <ConnectButton showBalance={false} />
                  </div>
                </div>

                
            <div className="flex flex-wrap w-[100%] justify-center mt-10">
                <div className=" rounded-lg w-[100%] px-10 py-7 lg:w-[50%] mb-10 border bg-white">
                  <h6 className="text-2xl text-center mb-10">Purchase Carbon Credits</h6>
                 <form onSubmit={handleSubmit} className="flex w-full flex-wrap">

                <div className="w-[100%] lg:w-[100%] mr-10 mb-5">
                    <label htmlFor="Company">How much Carbon Credits do you want to purchase?</label>
                  <input
                    type="number"
                    value={amount}
                    placeholder="Enter Amount"
                    id="amount"
                    required
                    onChange={(e) => setAmount(e.target.value)}
                    className="w-full cursor-pointer px-3 py-3 border-2 mt-5 rounded-lg"
                  />
                </div>
                
                
                <div className="w-[100%] lg:w-[100%] mr-10 mb-5">
                    <label htmlFor="Company">Device ID</label>
                  <input
                    type="text"
                    id=""
                    value={id}
                    required
                    onChange={(e) => setId(e.target.value)}
                    className="w-full cursor-pointer px-3 py-3 border-2 mt-5 rounded-lg"
                  />
                </div>
                {showBuying && (
                    <div className="absolute top-[90px] w-44 z-10">
                      <div className="bg-slate-50 w-full border-2 cursor-pointer py-6 border-slate-50 border-t-green-800">
                        <ul className="flex flex-col w-full justify-center items-center">
                          <li
                            className=" py-3 hover:bg-slate-300 w-full text-center"
                            onClick={() => changeBuying("Co2E")}
                          >
                            <p>Co2E</p>
                          </li>
                          <li
                            className=" py-3 hover:bg-slate-300 w-full text-center"
                            onClick={() => changeBuying("USDT")}
                          >
                            <p>USDT</p>
                          </li>
                        </ul>
                      </div>
                    </div>
                  )}
                
                  
                <button
                  type="submit"
                  disabled={isLoading}
                  className="text-white bg-green-700 flex justify-center w-[93%] h-16 mt-10 rounded-md px-12  items-center"
                >{isLoading ? "Purchasing..." : "Proceed"}
                </button>
              </form>
                    
                    </div>
                </div>
            </div>
      </main>
    </div>
  );
}

